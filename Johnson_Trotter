#include <stdio.h>

#define MAX_SIZE 10

void printPermutations(int n) {
    int numbers[MAX_SIZE], directions[MAX_SIZE];
   
    // Initialize numbers in ascending order
    for (int i = 0; i < n; i++) {
        numbers[i] = i + 1;
        directions[i] = -1; // -1 represents left direction
    }
   
    // Print initial permutation
    for (int i = 0; i < n; i++) {
        printf("%d ", numbers[i]);
    }
    printf("\n");
   
    int mobileIndex, mobileNumber;
   
    while (1) {
        // Find the largest mobile number and its index
        mobileNumber = 0;
        for (int i = 0; i < n; i++) {
            if (numbers[i] > mobileNumber) {
                if (directions[i] == -1 && i > 0 && numbers[i - 1] < numbers[i]) {
                    mobileNumber = numbers[i];
                    mobileIndex = i;
                }
                else if (directions[i] == 1 && i < n - 1 && numbers[i + 1] < numbers[i]) {
                    mobileNumber = numbers[i];
                    mobileIndex = i;
                }
            }
        }
       
        // If there is no mobile number, exit the loop
        if (mobileNumber == 0) {
            break;
        }
       
        // Swap the mobile number with its adjacent element
        if (directions[mobileIndex] == -1) {
            int temp = numbers[mobileIndex - 1];
            numbers[mobileIndex - 1] = numbers[mobileIndex];
            numbers[mobileIndex] = temp;
           
            temp = directions[mobileIndex - 1];
            directions[mobileIndex - 1] = directions[mobileIndex];
            directions[mobileIndex] = temp;
           
            mobileIndex--;
        }
        else if (directions[mobileIndex] == 1) {
            int temp = numbers[mobileIndex + 1];
            numbers[mobileIndex + 1] = numbers[mobileIndex];
            numbers[mobileIndex] = temp;
           
            temp = directions[mobileIndex + 1];
            directions[mobileIndex + 1] = directions[mobileIndex];
            directions[mobileIndex] = temp;
           
            mobileIndex++;
        }
       
        // Reverse the direction of all numbers greater than the mobile number
        for (int i = 0; i < n; i++) {
            if (numbers[i] > mobileNumber) {
                directions[i] *= -1;
            }
        }
       
        // Print the new permutation
        for (int i = 0; i < n; i++) {
            printf("%d ", numbers[i]);
        }
        printf("\n");
    }
}

int main() {
    int n;
    printf("Enter the value of n: ");
    scanf("%d", &n);
   
    if (n < 1 || n > MAX_SIZE) {
        printf("Invalid input. Please enter a value between 1 and %d.\n", MAX_SIZE);
        return 0;
    }
   
    printf("Permutations using Johnson-Trotter algorithm:\n");
    printPermutations(n);
   
    return 0;
}
